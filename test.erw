# Comment
#[ Multiline comment
	# Nested comment
	#[
		Nested multiline comment
		...
	#]
#]

# Empty types
type Empty1;
type Empty2;
type Empty3;
type Empty4;

# Typedefs
type TypeDef1: Char;
type TypeDef2: Bool;
type TypeDef3: Int8;
type TypeDef4: Int16;
type TypeDef5: Int32;
type TypeDef6: Int64;
type TypeDef7: UInt8;
type TypeDef8: UInt16;
type TypeDef9: UInt32;
type TypeDef10: UInt64;
type TypeDef11: Float32;
type TypeDef12: Float64;

# Functions
func function1: ()
{
	# Nested functions
	func nestedfunction1: () {}
	func nestedfunction2: (let x: TypeDef1) -> Int32 {return 0;}
	func nestedfunction3: (let x: TypeDef1, mut y: Int32) -> Int32 {return 0;}

	func test: () -> Int32
	{
		return 12;
	}

	type T: UInt8;
	let x: T = cast(T, 12);
	return;
}

func main: () -> Int32
{
	defer
	{
		# @puts("Hello World");
	}

	let xx: Int32 = 12;
	let y: Float64;
	let z: Char;

	type T: Int32;
	func test: (let x: Int32) -> T
	{
		defer
		{
			# @puts("!!!");
		}
		return cast(T, 44) + x;
	}

	if(true)
	{
		function1();
	}
	elseif(false)
	{

	}
	else
	{
		while(true)
		{
			return 44;
		}
	}

	mut x: Int32 = cast(Int32, test(3));
	x += 12;
	x *= (1 + 1) * 2;
	x /= 2;
	x ^= 2;
	x %= 3;
	# @printf("%i", x);

	x = x + 19;
	if(x < 20 or x > 20 and x != 12 and x == 12)
	{

	}

	return 0;
}

type Vec3f: struct(
	let x: Float32 = 0.0, 
	let y: Float32 = 0.0,
	let z: Float32 = 0.0
);

# let vec: Vec3f = Vec3f.default;

func lmao: (let args: []Char)
{
	# Enums
	type Weekday: enum(
		monday, 
		tuesday, 
		wednesday, 
		thursday, 
		friday, 
		saturday, 
		sunday
	);

	let day: Weekday;# = Weekday.monday;

	# Structs
	type Position: struct(let x: Int32, let y: Int32);

	# let pos: Position = struct(x: 12, y: 44);

	# Unions
	type None;
	type Result: union(Int32, None);

	# let res: Result = Result(Int32: 12);

	# References
	let x: Int32;
	let xref: &Int32 = &x;
	let xref2: &Int32;# = &Int32(12);

	# Arrays
	let nums: [5]Int32; # = Int32[5](3, 42, 55, 124, 0);

	# Slices
	let numsslice: []Int32; # = Int32[](12, 999, 10, 44);

	func test: (let pos: Position) -> Result
	{
	#[
		if(pos.x > 0)
		{
			return Result(Int32: 42);
		}
		else
		{
			return Result(None:);
		}
	#]
		return cast(Result, 0);
	}

	let result: Result;# = test(Pos(x: 42, y: 109));
	#[match(result)
	{
		case(Int32 as x)
		{
			
		}
		case(None)
		{

		}
	}#]
}

type Player: struct(let x: Int32, let y: Int32);
type Union: union(Int32, Player, Float32);
type Weekdays: enum(monday, tuesday, wednesday);

func player_ctor: (let self: &Player) -> &Player
{
	self& = cast(Player, 2);
	return self;
}

func lol: () -> Int32
{
	let p: Player;
	player_ctor(&p);
	return 0;
}
