#[
	Mulitline comment
	Totally works
#]

type Int: Int32; # Declare a new type called Int, of type Int32
 
func print_int: (let x: Int) # Take one Int as argument
{ 
	# Do print stuff
};

func main: () # This function returns nothing
{
	func add: (let x: Int, let y: Int) -> Int # Return Int
	{ 
		let result: Int = -x * 2;
		return result;
	};

	print_int(add(12, 44, 3 #[This should generate an error#]));

	if(true || !false)
	{ 
		print("It works");
	};

	mut i_am_unused: Float64 = 3.14159265358979;

	mut x: Int = 33;
	mut y: Int = 44;
	mut z: Int = 55;

	mut arr: Int &mut[] = [&a, &b, &c]; # Array of mutable references to Int
	mut arr: []mut& Int = [&a, &b, &c]; # Is this syntax better?
 
	arr[0] = &z; # No problem
	mut arr_ref: Int &mut[] &mut = arr; # Mutable reference to array of mutable references to Int
	int*** arr_ref = arr; # C code

	*arr_ref = <another reference>; # No problem

	let x: Int = 33;
	let y: Int = 44;
	let z: Int = 55;

	let arr: Int&[] = [&x, &y, &z]; # Array of immutable references to Int 
	arr[0] = &z; # Error
	let arr_ref: Int&[]& = arr; # Immutable referece to array of immutable references to Int
	const int* const* const* const arr_ref = arr;

	*arr_ref = <another reference>; # Error

	let this_will_not_work: Int &mut[] = [&x, &y, &z]; # Error
};

